//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 31/07/2018 1:40:24
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace HjaContext
{

    [DatabaseAttribute(Name = "hja")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class HjaDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(HjaDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertReceta(Receta instance);
        partial void UpdateReceta(Receta instance);
        partial void DeleteReceta(Receta instance);
        partial void InsertActividade(Actividade instance);
        partial void UpdateActividade(Actividade instance);
        partial void DeleteActividade(Actividade instance);
        partial void InsertRecetaDetalle(RecetaDetalle instance);
        partial void UpdateRecetaDetalle(RecetaDetalle instance);
        partial void DeleteRecetaDetalle(RecetaDetalle instance);
        partial void InsertMedicamento(Medicamento instance);
        partial void UpdateMedicamento(Medicamento instance);
        partial void DeleteMedicamento(Medicamento instance);
        partial void InsertVia(Via instance);
        partial void UpdateVia(Via instance);
        partial void DeleteVia(Via instance);
        partial void InsertRol(Rol instance);
        partial void UpdateRol(Rol instance);
        partial void DeleteRol(Rol instance);
        partial void InsertPersona(Persona instance);
        partial void UpdatePersona(Persona instance);
        partial void DeletePersona(Persona instance);
        partial void InsertPersonaRol(PersonaRol instance);
        partial void UpdatePersonaRol(PersonaRol instance);
        partial void DeletePersonaRol(PersonaRol instance);

        #endregion

        public HjaDataContext() :
        base(GetConnectionString("HjaDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public HjaDataContext(MappingSource mappingSource) :
        base(GetConnectionString("HjaDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public HjaDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HjaDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HjaDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HjaDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Receta> Recetas
        {
            get
            {
                return this.GetTable<Receta>();
            }
        }

        public Devart.Data.Linq.Table<Actividade> Actividades
        {
            get
            {
                return this.GetTable<Actividade>();
            }
        }

        public Devart.Data.Linq.Table<RecetaDetalle> RecetaDetalles
        {
            get
            {
                return this.GetTable<RecetaDetalle>();
            }
        }

        public Devart.Data.Linq.Table<Medicamento> Medicamentos
        {
            get
            {
                return this.GetTable<Medicamento>();
            }
        }

        public Devart.Data.Linq.Table<Via> Vias
        {
            get
            {
                return this.GetTable<Via>();
            }
        }

        public Devart.Data.Linq.Table<Rol> Rols
        {
            get
            {
                return this.GetTable<Rol>();
            }
        }

        public Devart.Data.Linq.Table<Persona> Personas
        {
            get
            {
                return this.GetTable<Persona>();
            }
        }

        public Devart.Data.Linq.Table<PersonaRol> PersonaRols
        {
            get
            {
                return this.GetTable<PersonaRol>();
            }
        }

    
        /// <summary>
        /// There are no comments for InfoPam in the schema.
        /// </summary>
        [Function(Name=@"hja.info_pam", IsComposable=true)]
        public System.Linq.IQueryable<InfoPamResult> InfoPam([Parameter(Name="p_receta_id", DbType="BIGINT")] System.Nullable<long> p_receta_id)
        {
            return this.CreateMethodCallQuery<InfoPamResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p_receta_id);
        }
    }
}

namespace HjaContext
{

    /// <summary>
    /// There are no comments for HjaContext.Receta in the schema.
    /// </summary>
    [Table(Name = @"hja.receta")]
    public partial class Receta : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _EncargadoId;

        private long _PamId;

        private System.Nullable<System.DateTime> _Fecha;
        #pragma warning restore 0649

        private EntityRef<Persona> _Persona_EncargadoId;

        private EntityRef<Persona> _Persona_PamId;

        private EntitySet<RecetaDetalle> _RecetaDetalles;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnEncargadoIdChanging(long value);
        partial void OnEncargadoIdChanged();
        partial void OnPamIdChanging(long value);
        partial void OnPamIdChanged();
        partial void OnFechaChanging(System.Nullable<System.DateTime> value);
        partial void OnFechaChanged();
        #endregion

        public Receta()
        {
            this._Persona_EncargadoId  = default(EntityRef<Persona>);
            this._Persona_PamId  = default(EntityRef<Persona>);
            this._RecetaDetalles = new EntitySet<RecetaDetalle>(new Action<RecetaDetalle>(this.attach_RecetaDetalles), new Action<RecetaDetalle>(this.detach_RecetaDetalles));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT8 NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EncargadoId in the schema.
        /// </summary>
        [Column(Name = @"encargado_id", Storage = "_EncargadoId", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long EncargadoId
        {
            get
            {
                return this._EncargadoId;
            }
            set
            {
                if (this._EncargadoId != value)
                {
                    if (this._Persona_EncargadoId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEncargadoIdChanging(value);
                    this.SendPropertyChanging("EncargadoId");
                    this._EncargadoId = value;
                    this.SendPropertyChanged("EncargadoId");
                    this.OnEncargadoIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PamId in the schema.
        /// </summary>
        [Column(Name = @"pam_id", Storage = "_PamId", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long PamId
        {
            get
            {
                return this._PamId;
            }
            set
            {
                if (this._PamId != value)
                {
                    if (this._Persona_PamId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPamIdChanging(value);
                    this.SendPropertyChanging("PamId");
                    this._PamId = value;
                    this.SendPropertyChanged("PamId");
                    this.OnPamIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fecha in the schema.
        /// </summary>
        [Column(Name = @"fecha", Storage = "_Fecha", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.OnFechaChanging(value);
                    this.SendPropertyChanging("Fecha");
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                    this.OnFechaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Persona_EncargadoId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Persona_Receta", Storage="_Persona_EncargadoId", ThisKey="EncargadoId", OtherKey="Id", IsForeignKey=true)]
        public Persona Persona_EncargadoId
        {
            get
            {
                return this._Persona_EncargadoId.Entity;
            }
            set
            {
                Persona previousValue = this._Persona_EncargadoId.Entity;
                if ((previousValue != value) || (this._Persona_EncargadoId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Persona_EncargadoId");
                    if (previousValue != null)
                    {
                        this._Persona_EncargadoId.Entity = null;
                        previousValue.Recetas_EncargadoId.Remove(this);
                    }
                    this._Persona_EncargadoId.Entity = value;
                    if (value != null)
                    {
                        this._EncargadoId = value.Id;
                        value.Recetas_EncargadoId.Add(this);
                    }
                    else
                    {
                        this._EncargadoId = default(long);
                    }
                    this.SendPropertyChanged("Persona_EncargadoId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Persona_PamId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Persona_Receta1", Storage="_Persona_PamId", ThisKey="PamId", OtherKey="Id", IsForeignKey=true)]
        public Persona Persona_PamId
        {
            get
            {
                return this._Persona_PamId.Entity;
            }
            set
            {
                Persona previousValue = this._Persona_PamId.Entity;
                if ((previousValue != value) || (this._Persona_PamId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Persona_PamId");
                    if (previousValue != null)
                    {
                        this._Persona_PamId.Entity = null;
                        previousValue.Recetas_PamId.Remove(this);
                    }
                    this._Persona_PamId.Entity = value;
                    if (value != null)
                    {
                        this._PamId = value.Id;
                        value.Recetas_PamId.Add(this);
                    }
                    else
                    {
                        this._PamId = default(long);
                    }
                    this.SendPropertyChanged("Persona_PamId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecetaDetalles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Receta_RecetaDetalle", Storage="_RecetaDetalles", ThisKey="Id", OtherKey="RecetaId", DeleteRule="CASCADE")]
        public EntitySet<RecetaDetalle> RecetaDetalles
        {
            get
            {
                return this._RecetaDetalles;
            }
            set
            {
                this._RecetaDetalles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RecetaDetalles(RecetaDetalle entity)
        {
            this.SendPropertyChanging("RecetaDetalles");
            entity.Receta = this;
        }
    
        private void detach_RecetaDetalles(RecetaDetalle entity)
        {
            this.SendPropertyChanging("RecetaDetalles");
            entity.Receta = null;
        }
    }

    /// <summary>
    /// There are no comments for HjaContext.Actividade in the schema.
    /// </summary>
    [Table(Name = @"hja.""Actividades""")]
    public partial class Actividade : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Actividad;

        private string _Descripcion;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnActividadChanging(string value);
        partial void OnActividadChanged();
        partial void OnDescripcionChanging(string value);
        partial void OnDescripcionChanged();
        #endregion

        public Actividade()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT8 NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Actividad in the schema.
        /// </summary>
        [Column(Name = @"actividad", Storage = "_Actividad", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Actividad
        {
            get
            {
                return this._Actividad;
            }
            set
            {
                if (this._Actividad != value)
                {
                    this.OnActividadChanging(value);
                    this.SendPropertyChanging("Actividad");
                    this._Actividad = value;
                    this.SendPropertyChanged("Actividad");
                    this.OnActividadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Descripcion in the schema.
        /// </summary>
        [Column(Name = @"""Descripcion""", Storage = "_Descripcion", DbType = "VARCHAR(80)", UpdateCheck = UpdateCheck.Never)]
        public string Descripcion
        {
            get
            {
                return this._Descripcion;
            }
            set
            {
                if (this._Descripcion != value)
                {
                    this.OnDescripcionChanging(value);
                    this.SendPropertyChanging("Descripcion");
                    this._Descripcion = value;
                    this.SendPropertyChanged("Descripcion");
                    this.OnDescripcionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HjaContext.RecetaDetalle in the schema.
    /// </summary>
    [Table(Name = @"hja.receta_detalle")]
    public partial class RecetaDetalle : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _RecetaId;

        private long _MedicamentoId;

        private long _ViaId;

        private string _Frecuencia;

        private string _Dosis;

        private System.Nullable<System.DateTime> _Fecha;
        #pragma warning restore 0649

        private EntityRef<Receta> _Receta;

        private EntityRef<Medicamento> _Medicamento;

        private EntityRef<Via> _Via;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnRecetaIdChanging(long value);
        partial void OnRecetaIdChanged();
        partial void OnMedicamentoIdChanging(long value);
        partial void OnMedicamentoIdChanged();
        partial void OnViaIdChanging(long value);
        partial void OnViaIdChanged();
        partial void OnFrecuenciaChanging(string value);
        partial void OnFrecuenciaChanged();
        partial void OnDosisChanging(string value);
        partial void OnDosisChanged();
        partial void OnFechaChanging(System.Nullable<System.DateTime> value);
        partial void OnFechaChanged();
        #endregion

        public RecetaDetalle()
        {
            this._Receta  = default(EntityRef<Receta>);
            this._Medicamento  = default(EntityRef<Medicamento>);
            this._Via  = default(EntityRef<Via>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT8 NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecetaId in the schema.
        /// </summary>
        [Column(Name = @"receta_id", Storage = "_RecetaId", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long RecetaId
        {
            get
            {
                return this._RecetaId;
            }
            set
            {
                if (this._RecetaId != value)
                {
                    if (this._Receta.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRecetaIdChanging(value);
                    this.SendPropertyChanging("RecetaId");
                    this._RecetaId = value;
                    this.SendPropertyChanged("RecetaId");
                    this.OnRecetaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MedicamentoId in the schema.
        /// </summary>
        [Column(Name = @"medicamento_id", Storage = "_MedicamentoId", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long MedicamentoId
        {
            get
            {
                return this._MedicamentoId;
            }
            set
            {
                if (this._MedicamentoId != value)
                {
                    if (this._Medicamento.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMedicamentoIdChanging(value);
                    this.SendPropertyChanging("MedicamentoId");
                    this._MedicamentoId = value;
                    this.SendPropertyChanged("MedicamentoId");
                    this.OnMedicamentoIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ViaId in the schema.
        /// </summary>
        [Column(Name = @"via_id", Storage = "_ViaId", CanBeNull = false, DbType = "INT8 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long ViaId
        {
            get
            {
                return this._ViaId;
            }
            set
            {
                if (this._ViaId != value)
                {
                    if (this._Via.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnViaIdChanging(value);
                    this.SendPropertyChanging("ViaId");
                    this._ViaId = value;
                    this.SendPropertyChanged("ViaId");
                    this.OnViaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Frecuencia in the schema.
        /// </summary>
        [Column(Name = @"frecuencia", Storage = "_Frecuencia", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Frecuencia
        {
            get
            {
                return this._Frecuencia;
            }
            set
            {
                if (this._Frecuencia != value)
                {
                    this.OnFrecuenciaChanging(value);
                    this.SendPropertyChanging("Frecuencia");
                    this._Frecuencia = value;
                    this.SendPropertyChanged("Frecuencia");
                    this.OnFrecuenciaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dosis in the schema.
        /// </summary>
        [Column(Name = @"dosis", Storage = "_Dosis", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Dosis
        {
            get
            {
                return this._Dosis;
            }
            set
            {
                if (this._Dosis != value)
                {
                    this.OnDosisChanging(value);
                    this.SendPropertyChanging("Dosis");
                    this._Dosis = value;
                    this.SendPropertyChanged("Dosis");
                    this.OnDosisChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fecha in the schema.
        /// </summary>
        [Column(Name = @"fecha", Storage = "_Fecha", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.OnFechaChanging(value);
                    this.SendPropertyChanging("Fecha");
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                    this.OnFechaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Receta in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Receta_RecetaDetalle", Storage="_Receta", ThisKey="RecetaId", OtherKey="Id", IsForeignKey=true)]
        public Receta Receta
        {
            get
            {
                return this._Receta.Entity;
            }
            set
            {
                Receta previousValue = this._Receta.Entity;
                if ((previousValue != value) || (this._Receta.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Receta");
                    if (previousValue != null)
                    {
                        this._Receta.Entity = null;
                        previousValue.RecetaDetalles.Remove(this);
                    }
                    this._Receta.Entity = value;
                    if (value != null)
                    {
                        this._RecetaId = value.Id;
                        value.RecetaDetalles.Add(this);
                    }
                    else
                    {
                        this._RecetaId = default(long);
                    }
                    this.SendPropertyChanged("Receta");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Medicamento in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Medicamento_RecetaDetalle", Storage="_Medicamento", ThisKey="MedicamentoId", OtherKey="Id", IsForeignKey=true)]
        public Medicamento Medicamento
        {
            get
            {
                return this._Medicamento.Entity;
            }
            set
            {
                Medicamento previousValue = this._Medicamento.Entity;
                if ((previousValue != value) || (this._Medicamento.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Medicamento");
                    if (previousValue != null)
                    {
                        this._Medicamento.Entity = null;
                        previousValue.RecetaDetalles.Remove(this);
                    }
                    this._Medicamento.Entity = value;
                    if (value != null)
                    {
                        this._MedicamentoId = value.Id;
                        value.RecetaDetalles.Add(this);
                    }
                    else
                    {
                        this._MedicamentoId = default(long);
                    }
                    this.SendPropertyChanged("Medicamento");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Via in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Via_RecetaDetalle", Storage="_Via", ThisKey="ViaId", OtherKey="Id", IsForeignKey=true)]
        public Via Via
        {
            get
            {
                return this._Via.Entity;
            }
            set
            {
                Via previousValue = this._Via.Entity;
                if ((previousValue != value) || (this._Via.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Via");
                    if (previousValue != null)
                    {
                        this._Via.Entity = null;
                        previousValue.RecetaDetalles.Remove(this);
                    }
                    this._Via.Entity = value;
                    if (value != null)
                    {
                        this._ViaId = value.Id;
                        value.RecetaDetalles.Add(this);
                    }
                    else
                    {
                        this._ViaId = default(long);
                    }
                    this.SendPropertyChanged("Via");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HjaContext.Medicamento in the schema.
    /// </summary>
    [Table(Name = @"hja.medicamento")]
    public partial class Medicamento : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Descripcion;

        private string _Codigo;

        private string _Clave;

        private System.Nullable<long> _EncargadoId;
        #pragma warning restore 0649

        private EntitySet<RecetaDetalle> _RecetaDetalles;

        private EntityRef<Persona> _Persona;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnDescripcionChanging(string value);
        partial void OnDescripcionChanged();
        partial void OnCodigoChanging(string value);
        partial void OnCodigoChanged();
        partial void OnClaveChanging(string value);
        partial void OnClaveChanged();
        partial void OnEncargadoIdChanging(System.Nullable<long> value);
        partial void OnEncargadoIdChanged();
        #endregion

        public Medicamento()
        {
            this._RecetaDetalles = new EntitySet<RecetaDetalle>(new Action<RecetaDetalle>(this.attach_RecetaDetalles), new Action<RecetaDetalle>(this.detach_RecetaDetalles));
            this._Persona  = default(EntityRef<Persona>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT8 NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Descripcion in the schema.
        /// </summary>
        [Column(Name = @"descripcion", Storage = "_Descripcion", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Descripcion
        {
            get
            {
                return this._Descripcion;
            }
            set
            {
                if (this._Descripcion != value)
                {
                    this.OnDescripcionChanging(value);
                    this.SendPropertyChanging("Descripcion");
                    this._Descripcion = value;
                    this.SendPropertyChanged("Descripcion");
                    this.OnDescripcionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Codigo in the schema.
        /// </summary>
        [Column(Name = @"codigo", Storage = "_Codigo", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Codigo
        {
            get
            {
                return this._Codigo;
            }
            set
            {
                if (this._Codigo != value)
                {
                    this.OnCodigoChanging(value);
                    this.SendPropertyChanging("Codigo");
                    this._Codigo = value;
                    this.SendPropertyChanged("Codigo");
                    this.OnCodigoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Clave in the schema.
        /// </summary>
        [Column(Name = @"clave", Storage = "_Clave", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Clave
        {
            get
            {
                return this._Clave;
            }
            set
            {
                if (this._Clave != value)
                {
                    this.OnClaveChanging(value);
                    this.SendPropertyChanging("Clave");
                    this._Clave = value;
                    this.SendPropertyChanged("Clave");
                    this.OnClaveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EncargadoId in the schema.
        /// </summary>
        [Column(Name = @"encargado_id", Storage = "_EncargadoId", DbType = "INT8", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> EncargadoId
        {
            get
            {
                return this._EncargadoId;
            }
            set
            {
                if (this._EncargadoId != value)
                {
                    if (this._Persona.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEncargadoIdChanging(value);
                    this.SendPropertyChanging("EncargadoId");
                    this._EncargadoId = value;
                    this.SendPropertyChanged("EncargadoId");
                    this.OnEncargadoIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecetaDetalles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Medicamento_RecetaDetalle", Storage="_RecetaDetalles", ThisKey="Id", OtherKey="MedicamentoId", DeleteRule="CASCADE")]
        public EntitySet<RecetaDetalle> RecetaDetalles
        {
            get
            {
                return this._RecetaDetalles;
            }
            set
            {
                this._RecetaDetalles.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Persona in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Persona_Medicamento", Storage="_Persona", ThisKey="EncargadoId", OtherKey="Id", IsForeignKey=true)]
        public Persona Persona
        {
            get
            {
                return this._Persona.Entity;
            }
            set
            {
                Persona previousValue = this._Persona.Entity;
                if ((previousValue != value) || (this._Persona.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Persona");
                    if (previousValue != null)
                    {
                        this._Persona.Entity = null;
                        previousValue.Medicamentos.Remove(this);
                    }
                    this._Persona.Entity = value;
                    if (value != null)
                    {
                        this._EncargadoId = value.Id;
                        value.Medicamentos.Add(this);
                    }
                    else
                    {
                        this._EncargadoId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Persona");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RecetaDetalles(RecetaDetalle entity)
        {
            this.SendPropertyChanging("RecetaDetalles");
            entity.Medicamento = this;
        }
    
        private void detach_RecetaDetalles(RecetaDetalle entity)
        {
            this.SendPropertyChanging("RecetaDetalles");
            entity.Medicamento = null;
        }
    }

    /// <summary>
    /// There are no comments for HjaContext.Via in the schema.
    /// </summary>
    [Table(Name = @"hja.via")]
    public partial class Via : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Descripcion;
        #pragma warning restore 0649

        private EntitySet<RecetaDetalle> _RecetaDetalles;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnDescripcionChanging(string value);
        partial void OnDescripcionChanged();
        #endregion

        public Via()
        {
            this._RecetaDetalles = new EntitySet<RecetaDetalle>(new Action<RecetaDetalle>(this.attach_RecetaDetalles), new Action<RecetaDetalle>(this.detach_RecetaDetalles));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT8 NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Descripcion in the schema.
        /// </summary>
        [Column(Name = @"descripcion", Storage = "_Descripcion", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Descripcion
        {
            get
            {
                return this._Descripcion;
            }
            set
            {
                if (this._Descripcion != value)
                {
                    this.OnDescripcionChanging(value);
                    this.SendPropertyChanging("Descripcion");
                    this._Descripcion = value;
                    this.SendPropertyChanged("Descripcion");
                    this.OnDescripcionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecetaDetalles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Via_RecetaDetalle", Storage="_RecetaDetalles", ThisKey="Id", OtherKey="ViaId", DeleteRule="CASCADE")]
        public EntitySet<RecetaDetalle> RecetaDetalles
        {
            get
            {
                return this._RecetaDetalles;
            }
            set
            {
                this._RecetaDetalles.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RecetaDetalles(RecetaDetalle entity)
        {
            this.SendPropertyChanging("RecetaDetalles");
            entity.Via = this;
        }
    
        private void detach_RecetaDetalles(RecetaDetalle entity)
        {
            this.SendPropertyChanging("RecetaDetalles");
            entity.Via = null;
        }
    }

    /// <summary>
    /// There are no comments for HjaContext.Rol in the schema.
    /// </summary>
    [Table(Name = @"hja.rol")]
    public partial class Rol : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _RolNombre;
        #pragma warning restore 0649

        private EntitySet<PersonaRol> _PersonaRols;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnRolNombreChanging(string value);
        partial void OnRolNombreChanged();
        #endregion

        public Rol()
        {
            this._PersonaRols = new EntitySet<PersonaRol>(new Action<PersonaRol>(this.attach_PersonaRols), new Action<PersonaRol>(this.detach_PersonaRols));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT8 NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RolNombre in the schema.
        /// </summary>
        [Column(Name = @"rol_nombre", Storage = "_RolNombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string RolNombre
        {
            get
            {
                return this._RolNombre;
            }
            set
            {
                if (this._RolNombre != value)
                {
                    this.OnRolNombreChanging(value);
                    this.SendPropertyChanging("RolNombre");
                    this._RolNombre = value;
                    this.SendPropertyChanged("RolNombre");
                    this.OnRolNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonaRols in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Rol_PersonaRol", Storage="_PersonaRols", ThisKey="Id", OtherKey="RolId", DeleteRule="NO ACTION")]
        public EntitySet<PersonaRol> PersonaRols
        {
            get
            {
                return this._PersonaRols;
            }
            set
            {
                this._PersonaRols.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PersonaRols(PersonaRol entity)
        {
            this.SendPropertyChanging("PersonaRols");
            entity.Rol = this;
        }
    
        private void detach_PersonaRols(PersonaRol entity)
        {
            this.SendPropertyChanging("PersonaRols");
            entity.Rol = null;
        }
    }

    /// <summary>
    /// There are no comments for HjaContext.Persona in the schema.
    /// </summary>
    [Table(Name = @"hja.persona")]
    public partial class Persona : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Nombre;

        private string _ApellidoUno;

        private string _ApellidoDos;

        private string _Cedula;

        private string _Telefono;

        private string _Correo;

        private string _Clave;

        private System.Nullable<bool> _Entrada;
        #pragma warning restore 0649

        private EntitySet<Receta> _Recetas_EncargadoId;

        private EntitySet<Receta> _Recetas_PamId;

        private EntitySet<Medicamento> _Medicamentos;

        private EntitySet<PersonaRol> _PersonaRols;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnApellidoUnoChanging(string value);
        partial void OnApellidoUnoChanged();
        partial void OnApellidoDosChanging(string value);
        partial void OnApellidoDosChanged();
        partial void OnCedulaChanging(string value);
        partial void OnCedulaChanged();
        partial void OnTelefonoChanging(string value);
        partial void OnTelefonoChanged();
        partial void OnCorreoChanging(string value);
        partial void OnCorreoChanged();
        partial void OnClaveChanging(string value);
        partial void OnClaveChanged();
        partial void OnEntradaChanging(System.Nullable<bool> value);
        partial void OnEntradaChanged();
        #endregion

        public Persona()
        {
            this._Recetas_EncargadoId = new EntitySet<Receta>(new Action<Receta>(this.attach_Recetas_EncargadoId), new Action<Receta>(this.detach_Recetas_EncargadoId));
            this._Recetas_PamId = new EntitySet<Receta>(new Action<Receta>(this.attach_Recetas_PamId), new Action<Receta>(this.detach_Recetas_PamId));
            this._Medicamentos = new EntitySet<Medicamento>(new Action<Medicamento>(this.attach_Medicamentos), new Action<Medicamento>(this.detach_Medicamentos));
            this._PersonaRols = new EntitySet<PersonaRol>(new Action<PersonaRol>(this.attach_PersonaRols), new Action<PersonaRol>(this.detach_PersonaRols));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT8 NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApellidoUno in the schema.
        /// </summary>
        [Column(Name = @"apellido_uno", Storage = "_ApellidoUno", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ApellidoUno
        {
            get
            {
                return this._ApellidoUno;
            }
            set
            {
                if (this._ApellidoUno != value)
                {
                    this.OnApellidoUnoChanging(value);
                    this.SendPropertyChanging("ApellidoUno");
                    this._ApellidoUno = value;
                    this.SendPropertyChanged("ApellidoUno");
                    this.OnApellidoUnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApellidoDos in the schema.
        /// </summary>
        [Column(Name = @"apellido_dos", Storage = "_ApellidoDos", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ApellidoDos
        {
            get
            {
                return this._ApellidoDos;
            }
            set
            {
                if (this._ApellidoDos != value)
                {
                    this.OnApellidoDosChanging(value);
                    this.SendPropertyChanging("ApellidoDos");
                    this._ApellidoDos = value;
                    this.SendPropertyChanged("ApellidoDos");
                    this.OnApellidoDosChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cedula in the schema.
        /// </summary>
        [Column(Name = @"cedula", Storage = "_Cedula", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Cedula
        {
            get
            {
                return this._Cedula;
            }
            set
            {
                if (this._Cedula != value)
                {
                    this.OnCedulaChanging(value);
                    this.SendPropertyChanging("Cedula");
                    this._Cedula = value;
                    this.SendPropertyChanged("Cedula");
                    this.OnCedulaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telefono in the schema.
        /// </summary>
        [Column(Name = @"telefono", Storage = "_Telefono", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Telefono
        {
            get
            {
                return this._Telefono;
            }
            set
            {
                if (this._Telefono != value)
                {
                    this.OnTelefonoChanging(value);
                    this.SendPropertyChanging("Telefono");
                    this._Telefono = value;
                    this.SendPropertyChanged("Telefono");
                    this.OnTelefonoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Correo in the schema.
        /// </summary>
        [Column(Name = @"correo", Storage = "_Correo", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Correo
        {
            get
            {
                return this._Correo;
            }
            set
            {
                if (this._Correo != value)
                {
                    this.OnCorreoChanging(value);
                    this.SendPropertyChanging("Correo");
                    this._Correo = value;
                    this.SendPropertyChanged("Correo");
                    this.OnCorreoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Clave in the schema.
        /// </summary>
        [Column(Name = @"clave", Storage = "_Clave", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Clave
        {
            get
            {
                return this._Clave;
            }
            set
            {
                if (this._Clave != value)
                {
                    this.OnClaveChanging(value);
                    this.SendPropertyChanging("Clave");
                    this._Clave = value;
                    this.SendPropertyChanged("Clave");
                    this.OnClaveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Entrada in the schema.
        /// </summary>
        [Column(Name = @"entrada", Storage = "_Entrada", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Entrada
        {
            get
            {
                return this._Entrada;
            }
            set
            {
                if (this._Entrada != value)
                {
                    this.OnEntradaChanging(value);
                    this.SendPropertyChanging("Entrada");
                    this._Entrada = value;
                    this.SendPropertyChanged("Entrada");
                    this.OnEntradaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Recetas_EncargadoId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Persona_Receta", Storage="_Recetas_EncargadoId", ThisKey="Id", OtherKey="EncargadoId", DeleteRule="CASCADE")]
        public EntitySet<Receta> Recetas_EncargadoId
        {
            get
            {
                return this._Recetas_EncargadoId;
            }
            set
            {
                this._Recetas_EncargadoId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Recetas_PamId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Persona_Receta1", Storage="_Recetas_PamId", ThisKey="Id", OtherKey="PamId", DeleteRule="NO ACTION")]
        public EntitySet<Receta> Recetas_PamId
        {
            get
            {
                return this._Recetas_PamId;
            }
            set
            {
                this._Recetas_PamId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Medicamentos in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Persona_Medicamento", Storage="_Medicamentos", ThisKey="Id", OtherKey="EncargadoId", DeleteRule="NO ACTION")]
        public EntitySet<Medicamento> Medicamentos
        {
            get
            {
                return this._Medicamentos;
            }
            set
            {
                this._Medicamentos.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PersonaRols in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Persona_PersonaRol", Storage="_PersonaRols", ThisKey="Id", OtherKey="PersonaId", DeleteRule="NO ACTION")]
        public EntitySet<PersonaRol> PersonaRols
        {
            get
            {
                return this._PersonaRols;
            }
            set
            {
                this._PersonaRols.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Recetas_EncargadoId(Receta entity)
        {
            this.SendPropertyChanging("Recetas_EncargadoId");
            entity.Persona_EncargadoId = this;
        }
    
        private void detach_Recetas_EncargadoId(Receta entity)
        {
            this.SendPropertyChanging("Recetas_EncargadoId");
            entity.Persona_EncargadoId = null;
        }

        private void attach_Recetas_PamId(Receta entity)
        {
            this.SendPropertyChanging("Recetas_PamId");
            entity.Persona_PamId = this;
        }
    
        private void detach_Recetas_PamId(Receta entity)
        {
            this.SendPropertyChanging("Recetas_PamId");
            entity.Persona_PamId = null;
        }

        private void attach_Medicamentos(Medicamento entity)
        {
            this.SendPropertyChanging("Medicamentos");
            entity.Persona = this;
        }
    
        private void detach_Medicamentos(Medicamento entity)
        {
            this.SendPropertyChanging("Medicamentos");
            entity.Persona = null;
        }

        private void attach_PersonaRols(PersonaRol entity)
        {
            this.SendPropertyChanging("PersonaRols");
            entity.Persona = this;
        }
    
        private void detach_PersonaRols(PersonaRol entity)
        {
            this.SendPropertyChanging("PersonaRols");
            entity.Persona = null;
        }
    }

    /// <summary>
    /// There are no comments for HjaContext.PersonaRol in the schema.
    /// </summary>
    [Table(Name = @"hja.persona_rol")]
    public partial class PersonaRol : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private System.Nullable<long> _PersonaId;

        private System.Nullable<long> _RolId;
        #pragma warning restore 0649

        private EntityRef<Persona> _Persona;

        private EntityRef<Rol> _Rol;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnPersonaIdChanging(System.Nullable<long> value);
        partial void OnPersonaIdChanged();
        partial void OnRolIdChanging(System.Nullable<long> value);
        partial void OnRolIdChanged();
        #endregion

        public PersonaRol()
        {
            this._Persona  = default(EntityRef<Persona>);
            this._Rol  = default(EntityRef<Rol>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT8 NOT NULL ", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PersonaId in the schema.
        /// </summary>
        [Column(Name = @"persona_id", Storage = "_PersonaId", DbType = "INT8", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> PersonaId
        {
            get
            {
                return this._PersonaId;
            }
            set
            {
                if (this._PersonaId != value)
                {
                    if (this._Persona.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPersonaIdChanging(value);
                    this.SendPropertyChanging("PersonaId");
                    this._PersonaId = value;
                    this.SendPropertyChanged("PersonaId");
                    this.OnPersonaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RolId in the schema.
        /// </summary>
        [Column(Name = @"rol_id", Storage = "_RolId", DbType = "INT8", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> RolId
        {
            get
            {
                return this._RolId;
            }
            set
            {
                if (this._RolId != value)
                {
                    if (this._Rol.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRolIdChanging(value);
                    this.SendPropertyChanging("RolId");
                    this._RolId = value;
                    this.SendPropertyChanged("RolId");
                    this.OnRolIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Persona in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Persona_PersonaRol", Storage="_Persona", ThisKey="PersonaId", OtherKey="Id", IsForeignKey=true)]
        public Persona Persona
        {
            get
            {
                return this._Persona.Entity;
            }
            set
            {
                Persona previousValue = this._Persona.Entity;
                if ((previousValue != value) || (this._Persona.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Persona");
                    if (previousValue != null)
                    {
                        this._Persona.Entity = null;
                        previousValue.PersonaRols.Remove(this);
                    }
                    this._Persona.Entity = value;
                    if (value != null)
                    {
                        this._PersonaId = value.Id;
                        value.PersonaRols.Add(this);
                    }
                    else
                    {
                        this._PersonaId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Persona");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Rol in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Rol_PersonaRol", Storage="_Rol", ThisKey="RolId", OtherKey="Id", IsForeignKey=true)]
        public Rol Rol
        {
            get
            {
                return this._Rol.Entity;
            }
            set
            {
                Rol previousValue = this._Rol.Entity;
                if ((previousValue != value) || (this._Rol.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Rol");
                    if (previousValue != null)
                    {
                        this._Rol.Entity = null;
                        previousValue.PersonaRols.Remove(this);
                    }
                    this._Rol.Entity = value;
                    if (value != null)
                    {
                        this._RolId = value.Id;
                        value.PersonaRols.Add(this);
                    }
                    else
                    {
                        this._RolId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Rol");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}

namespace HjaContext
{

    /// <summary>
    /// There are no comments for InfoPamResult in the schema.
    /// </summary>
    public partial class InfoPamResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Nombre;

        private string _ApellidoUno;

        private string _ApellidoDos;

        private System.Nullable<System.DateTime> _Fecha;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnApellidoUnoChanging(string value);
        partial void OnApellidoUnoChanged();
        partial void OnApellidoDosChanging(string value);
        partial void OnApellidoDosChanged();
        partial void OnFechaChanging(System.Nullable<System.DateTime> value);
        partial void OnFechaChanged();
        #endregion

        public InfoPamResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApellidoUno in the schema.
        /// </summary>
        [Column(Name = @"apellido_uno", Storage = "_ApellidoUno", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ApellidoUno
        {
            get
            {
                return this._ApellidoUno;
            }
            set
            {
                if (this._ApellidoUno != value)
                {
                    this.OnApellidoUnoChanging(value);
                    this.SendPropertyChanging("ApellidoUno");
                    this._ApellidoUno = value;
                    this.SendPropertyChanged("ApellidoUno");
                    this.OnApellidoUnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApellidoDos in the schema.
        /// </summary>
        [Column(Name = @"apellido_dos", Storage = "_ApellidoDos", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ApellidoDos
        {
            get
            {
                return this._ApellidoDos;
            }
            set
            {
                if (this._ApellidoDos != value)
                {
                    this.OnApellidoDosChanging(value);
                    this.SendPropertyChanging("ApellidoDos");
                    this._ApellidoDos = value;
                    this.SendPropertyChanged("ApellidoDos");
                    this.OnApellidoDosChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fecha in the schema.
        /// </summary>
        [Column(Name = @"fecha", Storage = "_Fecha", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.OnFechaChanging(value);
                    this.SendPropertyChanging("Fecha");
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                    this.OnFechaChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
