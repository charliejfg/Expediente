//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 03/07/2018 16:30:40
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace HjaContext
{

    [DatabaseAttribute(Name = "hja")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class HjaDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(HjaDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertPersona(Persona instance);
        partial void UpdatePersona(Persona instance);
        partial void DeletePersona(Persona instance);

        #endregion

        public HjaDataContext() :
        base(GetConnectionString("HjaDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public HjaDataContext(MappingSource mappingSource) :
        base(GetConnectionString("HjaDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public HjaDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HjaDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HjaDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public HjaDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Persona> Personas
        {
            get
            {
                return this.GetTable<Persona>();
            }
        }
    }
}

namespace HjaContext
{

    /// <summary>
    /// There are no comments for HjaContext.Persona in the schema.
    /// </summary>
    [Table(Name = @"hja.persona")]
    public partial class Persona : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Nombre;

        private string _ApellidoUno;

        private string _ApellidoDos;

        private string _Cedula;

        private string _Telefono;

        private string _Correo;

        private string _Clave;

        private System.Nullable<bool> _Entrada;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnApellidoUnoChanging(string value);
        partial void OnApellidoUnoChanged();
        partial void OnApellidoDosChanging(string value);
        partial void OnApellidoDosChanged();
        partial void OnCedulaChanging(string value);
        partial void OnCedulaChanged();
        partial void OnTelefonoChanging(string value);
        partial void OnTelefonoChanged();
        partial void OnCorreoChanging(string value);
        partial void OnCorreoChanged();
        partial void OnClaveChanging(string value);
        partial void OnClaveChanged();
        partial void OnEntradaChanging(System.Nullable<bool> value);
        partial void OnEntradaChanged();
        #endregion

        public Persona()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT8 NOT NULL", IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Name = @"nombre", Storage = "_Nombre", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApellidoUno in the schema.
        /// </summary>
        [Column(Name = @"apellido_uno", Storage = "_ApellidoUno", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ApellidoUno
        {
            get
            {
                return this._ApellidoUno;
            }
            set
            {
                if (this._ApellidoUno != value)
                {
                    this.OnApellidoUnoChanging(value);
                    this.SendPropertyChanging("ApellidoUno");
                    this._ApellidoUno = value;
                    this.SendPropertyChanged("ApellidoUno");
                    this.OnApellidoUnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApellidoDos in the schema.
        /// </summary>
        [Column(Name = @"apellido_dos", Storage = "_ApellidoDos", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string ApellidoDos
        {
            get
            {
                return this._ApellidoDos;
            }
            set
            {
                if (this._ApellidoDos != value)
                {
                    this.OnApellidoDosChanging(value);
                    this.SendPropertyChanging("ApellidoDos");
                    this._ApellidoDos = value;
                    this.SendPropertyChanged("ApellidoDos");
                    this.OnApellidoDosChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cedula in the schema.
        /// </summary>
        [Column(Name = @"cedula", Storage = "_Cedula", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Cedula
        {
            get
            {
                return this._Cedula;
            }
            set
            {
                if (this._Cedula != value)
                {
                    this.OnCedulaChanging(value);
                    this.SendPropertyChanging("Cedula");
                    this._Cedula = value;
                    this.SendPropertyChanged("Cedula");
                    this.OnCedulaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telefono in the schema.
        /// </summary>
        [Column(Name = @"telefono", Storage = "_Telefono", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Telefono
        {
            get
            {
                return this._Telefono;
            }
            set
            {
                if (this._Telefono != value)
                {
                    this.OnTelefonoChanging(value);
                    this.SendPropertyChanging("Telefono");
                    this._Telefono = value;
                    this.SendPropertyChanged("Telefono");
                    this.OnTelefonoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Correo in the schema.
        /// </summary>
        [Column(Name = @"correo", Storage = "_Correo", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Correo
        {
            get
            {
                return this._Correo;
            }
            set
            {
                if (this._Correo != value)
                {
                    this.OnCorreoChanging(value);
                    this.SendPropertyChanging("Correo");
                    this._Correo = value;
                    this.SendPropertyChanged("Correo");
                    this.OnCorreoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Clave in the schema.
        /// </summary>
        [Column(Name = @"clave", Storage = "_Clave", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Clave
        {
            get
            {
                return this._Clave;
            }
            set
            {
                if (this._Clave != value)
                {
                    this.OnClaveChanging(value);
                    this.SendPropertyChanging("Clave");
                    this._Clave = value;
                    this.SendPropertyChanged("Clave");
                    this.OnClaveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Entrada in the schema.
        /// </summary>
        [Column(Name = @"entrada", Storage = "_Entrada", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Entrada
        {
            get
            {
                return this._Entrada;
            }
            set
            {
                if (this._Entrada != value)
                {
                    this.OnEntradaChanging(value);
                    this.SendPropertyChanging("Entrada");
                    this._Entrada = value;
                    this.SendPropertyChanged("Entrada");
                    this.OnEntradaChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
